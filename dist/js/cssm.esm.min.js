/*! @bivarcs/cssm 0.0.1 | MIT | https://github.com/bivarcs/cssm */
var r=Object.defineProperty,s=Object.getOwnPropertySymbols,h=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,a=(t,e,i)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,n=(t,e)=>{for(var i in e=e||{})h.call(e,i)&&a(t,i,e[i]);if(s)for(var i of s(e))o.call(e,i)&&a(t,i,e[i]);return t};class t{constructor(){this.cache=[],this.style=[]}update(){for(let t=this.style,e=0;t.length>e;e++){var i=t[e];for(let t=i.use,e=0;t.length>e;e++){var r=t[e];this.isDead(r)&&i.use.splice(e--,1)}i.use.length||(i.element.remove(),this.style.splice(e--,1))}}attach(t,e,i){var r,s,h=this.findCache(t);h&&((r=this.findStyle(t))||((s=document.createElement("style")).innerHTML=h.text,this.style.push(r={id:t,element:s,use:[]})),h=r.element,r.use.some(t=>t.source===e)||this.isDead(t={source:e,life:i})||r.use.push(t),document.head.contains(h)||document.head.appendChild(h))}detach(t,i){if(this.findCache(t)){var r=this.findStyle(t);if(r)for(let t=r.use,e=0;t.length>e;e++)t[e].source===i&&r.use.splice(e--,1)}}isDead(t){var{source:t,life:e}=t;return"string"==typeof e?!t[e]:"function"==typeof e&&!e(t)}findStyle(t){return this.find("style",t)}findCache(t){return this.find("cache",t)}find(i,r){for(let t=this[i],e=0;t.length>e;e++){var s=t[e];if(s.id===r)return s}}create(e,t){this.cache.some(t=>t.id===e)||this.cache.push({id:e,text:t})}load(i,t){return this.findCache(i)?Promise.resolve(i):new Promise(e=>{fetch(i,n({method:"GET"},t||{})).then(t=>t.text()).then(t=>{this.create(i,t),e(i)}).catch(t=>{console.error(t),e(!1)})})}destroy(){this.style.forEach(t=>{t.element.remove()}),this.cache.length=0,this.style.length=0,this.status=!1}}export{t as default};
